"use strict";

exports.string = exports.objectOf = exports.number = exports.mapOfValues = exports.literal = exports.enumOf = exports.callback = exports.boolean = exports.arrayOf = exports.anything = exports.anyOf = void 0;
var _utils = require("./utils");
var _booleanValidator = require("./booleanValidator");
var _callbackValidator = require("./callbackValidator");
var _createArrayOfValidator = require("./createArrayOfValidator");
var _createDefaultValidator = require("./createDefaultValidator");
var _createDeprecatedValidator = require("./createDeprecatedValidator");
var _createLiteralValidator = require("./createLiteralValidator");
var _createMapOfValuesValidator = require("./createMapOfValuesValidator");
var _createMinimumValidator = require("./createMinimumValidator");
var _createNoUnknownFieldsValidator = require("./createNoUnknownFieldsValidator");
var _createNonEmptyValidator = require("./createNonEmptyValidator");
var _createObjectOfValidator = require("./createObjectOfValidator");
var _createAnyOfValidator = require("./createAnyOfValidator");
var _createUniqueValidator = require("./createUniqueValidator");
var _createUniqueItemsValidator = require("./createUniqueItemsValidator");
var _domainValidator = require("./domainValidator");
var _integerValidator = require("./integerValidator");
var _numberValidator = require("./numberValidator");
var _regexpValidator = require("./regexpValidator");
var _requiredValidator = require("./requiredValidator");
var _stringValidator = require("./stringValidator");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                  Copyright 2020 Adobe. All rights reserved.
                                                                                                                                                                                                                  This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                  you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                  of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                  OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                  governing permissions and limitations under the License.
                                                                                                                                                                                                                  */ /**
                                                                                                                                                                                                                      * Validators are functions of two parameters (value and path) that return the
                                                                                                                                                                                                                      * computed value if the input is valid, or throw an exception if the input is
                                                                                                                                                                                                                      * invalid. In most cases the returned value is the same as the input value;
                                                                                                                                                                                                                      * however, reference createDefaultValidator.js to see an example where the
                                                                                                                                                                                                                      * computed value is different from the input. Additionally, if we ever wanted
                                                                                                                                                                                                                      * to coerce types (i.e. parse string values into integers) as part of the
                                                                                                                                                                                                                      * validation process we could use the computed value to accomplish that.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * The path parameter is used to generate informative error messages. It is
                                                                                                                                                                                                                      * created by the objectOf, and arrayOf validators so that any error message can
                                                                                                                                                                                                                      * describe which key within the object or array is invalid.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * The validators also have methods to chain additional validation logic. For
                                                                                                                                                                                                                      * example, when you call `string()` to start a validator chain, it returns a
                                                                                                                                                                                                                      * validator function but it also has methods like `required` and `nonEmpty`.
                                                                                                                                                                                                                      * Here you can see that these methods are actually calling `chain`.
                                                                                                                                                                                                                      * Specifically in this function, the leftValidator is called first and then the
                                                                                                                                                                                                                      * return value of that is sent to the rightValidator. For example, when calling
                                                                                                                                                                                                                      * `string().nonEmpty().required()` the following chain is built up:
                                                                                                                                                                                                                      * ```
                                                                                                                                                                                                                      *              *
                                                                                                                                                                                                                      *            /   \
                                                                                                                                                                                                                      *          *     required
                                                                                                                                                                                                                      *        /   \
                                                                                                                                                                                                                      *      *     nonEmpty
                                                                                                                                                                                                                      *    /   \
                                                                                                                                                                                                                      * base   string
                                                                                                                                                                                                                      * ```
                                                                                                                                                                                                                      * Where every * is a call to chain where the two are combined. The individual
                                                                                                                                                                                                                      * validators are called from left to right in the above tree. The base
                                                                                                                                                                                                                      * validator is simply the identity function `value => value`, representing an
                                                                                                                                                                                                                      * optional value.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * After combining the validators, the new validator function is then augmented
                                                                                                                                                                                                                      * with the methods from the leftValidator and from the additionalMethods
                                                                                                                                                                                                                      * parameter. For example, when the string() function is called it chains to the
                                                                                                                                                                                                                      * base validator, but also adds additional methods like (`regexp`, `domain`,
                                                                                                                                                                                                                      * `nonEmpty`, and `unique`). When `nonEmpty` is called, which calls chain
                                                                                                                                                                                                                      * again, the additional methods are carried forward because they are already
                                                                                                                                                                                                                      * defined on the leftValidator.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * The base validator also contains the two methods `required` and `default`, so
                                                                                                                                                                                                                      * these can be used anywhere after any of the exposed validator functions are
                                                                                                                                                                                                                      * called.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * For most validators, we want the validation to be optional (i.e. allow null
                                                                                                                                                                                                                      * or undefined values). To accomplish this, the validator needs to have a check
                                                                                                                                                                                                                      * at the begining of the function, short circuiting the validation logic and
                                                                                                                                                                                                                      * returning value if value is null or undefined. `default` and `required` do
                                                                                                                                                                                                                      * not want this null check though. Indeed, `default` should return the default
                                                                                                                                                                                                                      * value if value is null, and `required` should throw an error if value is
                                                                                                                                                                                                                      * null.
                                                                                                                                                                                                                      *
                                                                                                                                                                                                                      * So to keep from having to have a null check in front of most validators,
                                                                                                                                                                                                                      * nullSafeChain allows you to chain a validator in a null-safe way.
                                                                                                                                                                                                                      */
// The base validator does no validation and just returns the value unchanged
var base = function base(value) {
  return value;
};

// The 'default', 'required', and 'deprecated' methods are available after any
// data-type method. Don't use the nullSafeChain on 'default' or 'required'
// because they need to handle the null or undefined case
base.default = function _default(defaultValue) {
  return (0, _utils.chain)(this, (0, _createDefaultValidator.default)(defaultValue));
};
base.required = function required() {
  return (0, _utils.chain)(this, _requiredValidator.default);
};

// helper validators
var domain = function domain() {
  return (0, _utils.nullSafeChain)(this, _domainValidator.default);
};
var minimumInteger = function minimumInteger(minValue) {
  return (0, _utils.nullSafeChain)(this, (0, _createMinimumValidator.default)("an integer", minValue));
};
var minimumNumber = function minimumNumber(minValue) {
  return (0, _utils.nullSafeChain)(this, (0, _createMinimumValidator.default)("a number", minValue));
};
var integer = function integer() {
  return (0, _utils.nullSafeChain)(this, _integerValidator.default, {
    minimum: minimumInteger
  });
};
var nonEmptyString = function nonEmptyString() {
  return (0, _utils.nullSafeChain)(this, (0, _createNonEmptyValidator.default)("a non-empty string"));
};
var nonEmptyArray = function nonEmptyArray() {
  return (0, _utils.nullSafeChain)(this, (0, _createNonEmptyValidator.default)("a non-empty array"));
};
var nonEmptyObject = function nonEmptyObject() {
  return (0, _utils.nullSafeChain)(this, (0, _createNonEmptyValidator.default)("a non-empty object"));
};
var regexp = function regexp() {
  return (0, _utils.nullSafeChain)(this, _regexpValidator.default);
};
var unique = function createUnique() {
  return (0, _utils.nullSafeChain)(this, (0, _createUniqueValidator.default)());
};
var uniqueItems = function createUniqueItems() {
  return (0, _utils.nullSafeChain)(this, (0, _createUniqueItemsValidator.default)());
};

// top-level validators.  These are the first functions that are called to create a validator.
var anyOf = function anyOf(validators, message) {
  // use chain here because we don't want to accept null or undefined unless at least
  // one of the validators accept null or undefined.
  return (0, _utils.chain)(this, (0, _createAnyOfValidator.default)(validators, message));
};
var anything = function anything() {
  return this;
};
var arrayOf = function arrayOf(elementValidator) {
  return (0, _utils.nullSafeChain)(this, (0, _createArrayOfValidator.default)(elementValidator), {
    nonEmpty: nonEmptyArray,
    uniqueItems: uniqueItems
  });
};
var boolean = function boolean() {
  return (0, _utils.nullSafeChain)(this, _booleanValidator.default);
};
var callback = function callback() {
  return (0, _utils.nullSafeChain)(this, _callbackValidator.default);
};
var literal = function literal(literalValue) {
  return (0, _utils.nullSafeChain)(this, (0, _createLiteralValidator.default)(literalValue));
};
var number = function number() {
  return (0, _utils.nullSafeChain)(this, _numberValidator.default, {
    minimum: minimumNumber,
    integer: integer,
    unique: unique
  });
};
var mapOfValues = function mapOfValues(valuesValidator) {
  return (0, _utils.nullSafeChain)(this, (0, _createMapOfValuesValidator.default)(valuesValidator), {
    nonEmpty: nonEmptyObject
  });
};
var createObjectOfAdditionalProperties = function createObjectOfAdditionalProperties(schema) {
  return {
    noUnknownFields: function noUnknownFields() {
      return (0, _utils.nullSafeChain)(this, (0, _createNoUnknownFieldsValidator.default)(schema));
    },
    nonEmpty: nonEmptyObject,
    concat: function concat(otherObjectOfValidator) {
      // combine the schema so that noUnknownFields, and concat have the combined schema
      var newSchema = _objectSpread(_objectSpread({}, schema), otherObjectOfValidator.schema);
      return (0, _utils.nullSafeChain)(this, otherObjectOfValidator, createObjectOfAdditionalProperties(newSchema));
    },
    deprecated: function deprecated(oldField, oldSchema, newField) {
      // Run the deprecated validator first so that the deprecated field is removed
      // before the objectOf validator runs.
      return (0, _utils.reverseNullSafeChainJoinErrors)(this, (0, _createDeprecatedValidator.default)(oldField, oldSchema, newField));
    },
    schema: schema
  };
};
var objectOf = function objectOf(schema) {
  return (0, _utils.nullSafeChain)(this, (0, _createObjectOfValidator.default)(schema), createObjectOfAdditionalProperties(schema));
};
var string = function string() {
  return (0, _utils.nullSafeChain)(this, _stringValidator.default, {
    regexp: regexp,
    domain: domain,
    nonEmpty: nonEmptyString,
    unique: unique
  });
};
var boundAnyOf = anyOf.bind(base);
exports.anyOf = boundAnyOf;
var boundAnything = anything.bind(base);
exports.anything = boundAnything;
var boundArrayOf = arrayOf.bind(base);
exports.arrayOf = boundArrayOf;
var boundBoolean = boolean.bind(base);
exports.boolean = boundBoolean;
var boundCallback = callback.bind(base);
exports.callback = boundCallback;
var boundLiteral = literal.bind(base);
exports.literal = boundLiteral;
var boundNumber = number.bind(base);
exports.number = boundNumber;
var boundMapOfValues = mapOfValues.bind(base);
exports.mapOfValues = boundMapOfValues;
var boundObjectOf = objectOf.bind(base);
exports.objectOf = boundObjectOf;
var boundString = string.bind(base);

// compound validators
exports.string = boundString;
var boundEnumOf = function boundEnumOf() {
  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
    values[_key] = arguments[_key];
  }
  return boundAnyOf(values.map(boundLiteral), "one of these values: [" + JSON.stringify(values) + "]");
};
exports.enumOf = boundEnumOf;