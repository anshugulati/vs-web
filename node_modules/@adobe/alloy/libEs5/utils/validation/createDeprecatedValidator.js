"use strict";

exports.default = void 0;
var _isObject = require("../isObject");
var _utils = require("./utils");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /*
                                                                                                                                                                                                                                                                                                                                                                                              Copyright 2023 Adobe. All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                              This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                              you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                                                                                                                                                                                              of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                              Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                                                                                                                                                                                              the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                                                                                                                                                                                              OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                                                                                                                                                                                              governing permissions and limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                              */
var _default = function _default(oldField, oldSchema, newField) {
  return function deprecated(value, path) {
    (0, _utils.assertValid)((0, _isObject.default)(value), value, path, "an object");
    var oldValue = value[oldField],
      newValue = value[newField],
      otherValues = _objectWithoutProperties(value, [oldField, newField].map(_toPropertyKey));
    var validatedOldValue = oldSchema(oldValue, path);
    if (validatedOldValue !== undefined) {
      var message = "The field '" + oldField + "' is deprecated. Use '" + newField + "' instead.";
      if (path) {
        message = "'" + path + "': " + message;
      }
      if (newValue !== undefined && newValue !== validatedOldValue) {
        throw new Error(message);
      } else if (this && this.logger) {
        this.logger.warn(message);
      }
    }
    return _objectSpread(_defineProperty({}, newField, newValue || validatedOldValue), otherValues);
  };
};
exports.default = _default;