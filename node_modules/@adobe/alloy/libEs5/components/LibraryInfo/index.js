"use strict";

exports.default = void 0;
var _libraryVersion = require("../../constants/libraryVersion");
var _coreCommands = require("../../constants/coreCommands");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; } /*
                                                                                                                                                                                        Copyright 2019 Adobe. All rights reserved.
                                                                                                                                                                                        This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                        you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                        of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                        
                                                                                                                                                                                        Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                        the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                        OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                        governing permissions and limitations under the License.
                                                                                                                                                                                        */
var prepareLibraryInfo = function prepareLibraryInfo(_ref) {
  var config = _ref.config,
    componentRegistry = _ref.componentRegistry;
  var allCommands = [].concat(_toConsumableArray(componentRegistry.getCommandNames()), [_coreCommands.CONFIGURE, _coreCommands.SET_DEBUG]).sort();
  var resultConfig = _objectSpread({}, config);
  Object.keys(config).forEach(function (key) {
    var value = config[key];
    if (typeof value !== "function") {
      return;
    }
    resultConfig[key] = value.toString();
  });
  return {
    version: _libraryVersion.default,
    configs: resultConfig,
    commands: allCommands
  };
};
var createLibraryInfo = function createLibraryInfo(_ref2) {
  var config = _ref2.config,
    componentRegistry = _ref2.componentRegistry;
  var libraryInfo = prepareLibraryInfo({
    config: config,
    componentRegistry: componentRegistry
  });
  return {
    commands: {
      getLibraryInfo: {
        run: function run() {
          return {
            libraryInfo: libraryInfo
          };
        }
      }
    }
  };
};
createLibraryInfo.namespace = "LibraryInfo";
var _default = createLibraryInfo;
exports.default = _default;