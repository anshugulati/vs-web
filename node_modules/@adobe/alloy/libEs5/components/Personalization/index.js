"use strict";

exports.default = void 0;
var _validation = require("../../utils/validation");
var _createComponent = require("./createComponent");
var _domActions = require("./dom-actions");
var _createCollect = require("./createCollect");
var _flicker = require("./flicker");
var _createFetchDataHandler = require("./createFetchDataHandler");
var _collectClicks = require("./dom-actions/clicks/collectClicks");
var _isAuthoringModeEnabled = require("./utils/isAuthoringModeEnabled");
var _event = require("./event");
var _createOnClickHandler = require("./createOnClickHandler");
var _createViewCacheManager = require("./createViewCacheManager");
var _createViewChangeHandler = require("./createViewChangeHandler");
var _createClickStorage2 = require("./createClickStorage");
var _createApplyPropositions = require("./createApplyPropositions");
var _createGetPageLocation = require("./createGetPageLocation");
var _createSetTargetMigration = require("./createSetTargetMigration");
var _remapCustomCodeOffers = require("./dom-actions/remapCustomCodeOffers");
var _remapHeadOffers = require("./dom-actions/remapHeadOffers");
var _createPreprocess = require("./dom-actions/createPreprocess");
var _injectCreateProposition = require("./handlers/injectCreateProposition");
var _createAsyncArray = require("./utils/createAsyncArray");
var schema = require("../../constants/schema");
var _processDefaultContent = require("./handlers/processDefaultContent");
var _surfaceUtils = require("./utils/surfaceUtils");
var _createProcessDomAction = require("./handlers/createProcessDomAction");
var _createProcessHtmlContent = require("./handlers/createProcessHtmlContent");
var _createProcessRedirect = require("./handlers/createProcessRedirect");
var _createProcessPropositions = require("./handlers/createProcessPropositions");
var _createOnDecisionHandler = require("./createOnDecisionHandler");
var _createProcessInAppMessage = require("./handlers/createProcessInAppMessage");
var _initInAppMessageActionsModules = require("./in-app-message-actions/initInAppMessageActionsModules");
var _createRedirect = require("./dom-actions/createRedirect");
var _createNotificationHandler = require("./createNotificationHandler");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                  Copyright 2019 Adobe. All rights reserved.
                                                                                                                                                                                                                  This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                  you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                  of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                  OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                  governing permissions and limitations under the License.
                                                                                                                                                                                                                  */
var createPersonalization = function createPersonalization(_ref) {
  var _schemaProcessors;
  var config = _ref.config,
    logger = _ref.logger,
    eventManager = _ref.eventManager;
  var targetMigrationEnabled = config.targetMigrationEnabled,
    prehidingStyle = config.prehidingStyle;
  var collect = (0, _createCollect.default)({
    eventManager: eventManager,
    mergeDecisionsMeta: _event.mergeDecisionsMeta
  });
  var _createClickStorage = (0, _createClickStorage2.default)(),
    getClickMetasBySelector = _createClickStorage.getClickMetasBySelector,
    getClickSelectors = _createClickStorage.getClickSelectors,
    storeClickMetrics = _createClickStorage.storeClickMetrics;
  var getPageLocation = (0, _createGetPageLocation.default)({
    window: window
  });
  var domActionsModules = (0, _domActions.initDomActionsModules)();
  var preprocess = (0, _createPreprocess.default)([_remapHeadOffers.default, _remapCustomCodeOffers.default]);
  var createProposition = (0, _injectCreateProposition.default)({
    preprocess: preprocess,
    isPageWideSurface: _surfaceUtils.isPageWideSurface
  });
  var viewCache = (0, _createViewCacheManager.default)({
    createProposition: createProposition
  });
  var executeRedirect = (0, _createRedirect.default)(window);
  var schemaProcessors = (_schemaProcessors = {}, _defineProperty(_schemaProcessors, schema.DEFAULT_CONTENT_ITEM, _processDefaultContent.default), _defineProperty(_schemaProcessors, schema.DOM_ACTION, (0, _createProcessDomAction.default)({
    modules: domActionsModules,
    logger: logger,
    storeClickMetrics: storeClickMetrics
  })), _defineProperty(_schemaProcessors, schema.HTML_CONTENT_ITEM, (0, _createProcessHtmlContent.default)({
    modules: domActionsModules,
    logger: logger
  })), _defineProperty(_schemaProcessors, schema.REDIRECT_ITEM, (0, _createProcessRedirect.default)({
    logger: logger,
    executeRedirect: executeRedirect,
    collect: collect
  })), _defineProperty(_schemaProcessors, schema.MESSAGE_IN_APP, (0, _createProcessInAppMessage.default)({
    modules: (0, _initInAppMessageActionsModules.default)(collect),
    logger: logger
  })), _schemaProcessors);
  var processPropositions = (0, _createProcessPropositions.default)({
    schemaProcessors: schemaProcessors,
    logger: logger
  });
  var renderedPropositions = (0, _createAsyncArray.default)();
  var notificationHandler = (0, _createNotificationHandler.default)(collect, renderedPropositions);
  var fetchDataHandler = (0, _createFetchDataHandler.default)({
    prehidingStyle: prehidingStyle,
    showContainers: _flicker.showContainers,
    hideContainers: _flicker.hideContainers,
    mergeQuery: _event.mergeQuery,
    processPropositions: processPropositions,
    createProposition: createProposition,
    notificationHandler: notificationHandler
  });
  var onClickHandler = (0, _createOnClickHandler.default)({
    mergeDecisionsMeta: _event.mergeDecisionsMeta,
    collectClicks: _collectClicks.default,
    getClickSelectors: getClickSelectors,
    getClickMetasBySelector: getClickMetasBySelector
  });
  var viewChangeHandler = (0, _createViewChangeHandler.default)({
    processPropositions: processPropositions,
    viewCache: viewCache
  });
  var applyPropositions = (0, _createApplyPropositions.default)({
    processPropositions: processPropositions,
    createProposition: createProposition,
    renderedPropositions: renderedPropositions,
    viewCache: viewCache
  });
  var setTargetMigration = (0, _createSetTargetMigration.default)({
    targetMigrationEnabled: targetMigrationEnabled
  });
  var onDecisionHandler = (0, _createOnDecisionHandler.default)({
    processPropositions: processPropositions,
    createProposition: createProposition,
    notificationHandler: notificationHandler
  });
  return (0, _createComponent.default)({
    getPageLocation: getPageLocation,
    logger: logger,
    fetchDataHandler: fetchDataHandler,
    viewChangeHandler: viewChangeHandler,
    onClickHandler: onClickHandler,
    isAuthoringModeEnabled: _isAuthoringModeEnabled.default,
    mergeQuery: _event.mergeQuery,
    viewCache: viewCache,
    showContainers: _flicker.showContainers,
    applyPropositions: applyPropositions,
    setTargetMigration: setTargetMigration,
    mergeDecisionsMeta: _event.mergeDecisionsMeta,
    renderedPropositions: renderedPropositions,
    onDecisionHandler: onDecisionHandler
  });
};
createPersonalization.namespace = "Personalization";
createPersonalization.configValidators = (0, _validation.objectOf)({
  prehidingStyle: (0, _validation.string)().nonEmpty(),
  targetMigrationEnabled: (0, _validation.boolean)().default(false)
});
var _default = createPersonalization;
exports.default = _default;