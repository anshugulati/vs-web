"use strict";

exports.default = void 0;
var _pageWideScope = require("../../../constants/pageWideScope");
var _scopeType = require("../constants/scopeType");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                  Copyright 2023 Adobe. All rights reserved.
                                                                                                                                                                                                                  This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                  you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                  of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                  OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                  governing permissions and limitations under the License.
                                                                                                                                                                                                                  */
var _default = function _default(_ref) {
  var preprocess = _ref.preprocess,
    isPageWideSurface = _ref.isPageWideSurface;
  var createItem = function createItem(item, proposition) {
    var schema = item.schema,
      data = item.data,
      _item$characteristics = item.characteristics;
    _item$characteristics = _item$characteristics === void 0 ? {} : _item$characteristics;
    var trackingLabel = _item$characteristics.trackingLabel;
    var processedData = preprocess(data);
    return {
      getSchema: function getSchema() {
        return schema;
      },
      getData: function getData() {
        return processedData;
      },
      getProposition: function getProposition() {
        return proposition;
      },
      getTrackingLabel: function getTrackingLabel() {
        return trackingLabel;
      },
      getOriginalItem: function getOriginalItem() {
        return item;
      },
      toString: function toString() {
        return JSON.stringify(item);
      },
      toJSON: function toJSON() {
        return item;
      }
    };
  };
  return function (payload) {
    var visibleInReturnedItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var id = payload.id,
      scope = payload.scope,
      scopeDetails = payload.scopeDetails,
      _payload$items = payload.items,
      items = _payload$items === void 0 ? [] : _payload$items;
    var _ref2 = scopeDetails || {},
      _ref2$characteristics = _ref2.characteristics;
    _ref2$characteristics = _ref2$characteristics === void 0 ? {} : _ref2$characteristics;
    var scopeType = _ref2$characteristics.scopeType;
    return {
      getScope: function getScope() {
        if (!scope) {
          return scope;
        }
        return scope;
      },
      getScopeType: function getScopeType() {
        if (scope === _pageWideScope.default || isPageWideSurface(scope)) {
          return _scopeType.PAGE_SCOPE_TYPE;
        }
        if (scopeType === _scopeType.VIEW_SCOPE_TYPE) {
          return _scopeType.VIEW_SCOPE_TYPE;
        }
        return _scopeType.PROPOSITION_SCOPE_TYPE;
      },
      getItems: function getItems() {
        var _this = this;
        return items.map(function (item) {
          return createItem(item, _this);
        });
      },
      getNotification: function getNotification() {
        return {
          id: id,
          scope: scope,
          scopeDetails: scopeDetails
        };
      },
      toJSON: function toJSON() {
        return payload;
      },
      addToReturnValues: function addToReturnValues(propositions, decisions, includedItems, renderAttempted) {
        if (visibleInReturnedItems) {
          propositions.push(_objectSpread(_objectSpread({}, payload), {}, {
            items: includedItems.map(function (i) {
              return i.getOriginalItem();
            }),
            renderAttempted: renderAttempted
          }));
          if (!renderAttempted) {
            decisions.push(_objectSpread(_objectSpread({}, payload), {}, {
              items: includedItems.map(function (i) {
                return i.getOriginalItem();
              })
            }));
          }
        }
      }
    };
  };
};
exports.default = _default;