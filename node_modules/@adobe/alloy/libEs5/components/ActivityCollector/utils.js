"use strict";

exports.urlStartsWithScheme = exports.truncateWhiteSpace = exports.trimQueryFromUrl = exports.isSupportedAnchorElement = exports.isExitLink = exports.isEmptyString = exports.isDownloadLink = exports.getAbsoluteUrlFromAnchorElement = exports.findSupportedAnchorElement = exports.determineLinkType = void 0;
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

var urlStartsWithScheme = function urlStartsWithScheme(url) {
  return url && /^[a-z0-9]+:\/\//i.test(url);
};
exports.urlStartsWithScheme = urlStartsWithScheme;
var getAbsoluteUrlFromAnchorElement = function getAbsoluteUrlFromAnchorElement(window, element) {
  var loc = window.location;
  var url = element.href ? element.href : "";
  var protocol = element.protocol,
    host = element.host;
  if (!urlStartsWithScheme(url)) {
    if (!protocol) {
      protocol = loc.protocol ? loc.protocol : "";
    }
    protocol = protocol ? protocol + "//" : "";
    if (!host) {
      host = loc.host ? loc.host : "";
    }
    var path = "";
    if (url.substring(0, 1) !== "/") {
      var indx = loc.pathname.lastIndexOf("/");
      indx = indx < 0 ? 0 : indx;
      path = loc.pathname.substring(0, indx);
    }
    url = "" + protocol + host + path + "/" + url;
  }
  return url;
};
exports.getAbsoluteUrlFromAnchorElement = getAbsoluteUrlFromAnchorElement;
var isSupportedAnchorElement = function isSupportedAnchorElement(element) {
  if (element.href && (element.tagName === "A" || element.tagName === "AREA") && (!element.onclick || !element.protocol || element.protocol.toLowerCase().indexOf("javascript") < 0)) {
    return true;
  }
  return false;
};
exports.isSupportedAnchorElement = isSupportedAnchorElement;
var trimQueryFromUrl = function trimQueryFromUrl(url) {
  var questionMarkIndex = url.indexOf("?");
  var hashIndex = url.indexOf("#");
  if (questionMarkIndex >= 0 && (questionMarkIndex < hashIndex || hashIndex < 0)) {
    return url.substring(0, questionMarkIndex);
  }
  if (hashIndex >= 0) {
    return url.substring(0, hashIndex);
  }
  return url;
};
exports.trimQueryFromUrl = trimQueryFromUrl;
var isDownloadLink = function isDownloadLink(downloadLinkQualifier, linkUrl, clickedObj) {
  var re = new RegExp(downloadLinkQualifier);
  var trimmedLinkUrl = trimQueryFromUrl(linkUrl).toLowerCase();
  return clickedObj.download ? true : re.test(trimmedLinkUrl);
};
exports.isDownloadLink = isDownloadLink;
var isExitLink = function isExitLink(window, linkUrl) {
  var currentHostname = window.location.hostname.toLowerCase();
  var trimmedLinkUrl = trimQueryFromUrl(linkUrl).toLowerCase();
  if (trimmedLinkUrl.indexOf(currentHostname) >= 0) {
    return false;
  }
  return true;
};

/**
 * Reduces repeated whitespace within a string. Whitespace surrounding the string
 * is trimmed and any occurrence of whitespace within the string is replaced with
 * a single space.
 * @param {string} str String to be formatted.
 * @returns {string} Formatted string.
 */
exports.isExitLink = isExitLink;
var truncateWhiteSpace = function truncateWhiteSpace(str) {
  return str && str.replace(/\s+/g, " ").trim();
};
exports.truncateWhiteSpace = truncateWhiteSpace;
var isEmptyString = function isEmptyString(str) {
  return !str || str.length === 0;
};
exports.isEmptyString = isEmptyString;
var determineLinkType = function determineLinkType(window, config, linkUrl, clickedObj) {
  var linkType = "other";
  if (isDownloadLink(config.downloadLinkQualifier, linkUrl, clickedObj)) {
    linkType = "download";
  } else if (isExitLink(window, linkUrl)) {
    linkType = "exit";
  }
  return linkType;
};
exports.determineLinkType = determineLinkType;
var findSupportedAnchorElement = function findSupportedAnchorElement(targetElement) {
  var node = targetElement;
  while (node) {
    if (isSupportedAnchorElement(node)) {
      return node;
    }
    node = node.parentNode;
  }
  return null;
};
exports.findSupportedAnchorElement = findSupportedAnchorElement;