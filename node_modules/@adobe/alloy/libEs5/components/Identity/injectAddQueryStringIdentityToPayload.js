"use strict";

exports.default = void 0;
var _utils = require("../../utils");
var _queryStringIdentityParam = require("../../constants/queryStringIdentityParam");
var _ecidNamespace = require("../../constants/ecidNamespace");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; } /*
                                                                      Copyright 2023 Adobe. All rights reserved.
                                                                      This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                      you may not use this file except in compliance with the License. You may obtain a copy
                                                                      of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                      
                                                                      Unless required by applicable law or agreed to in writing, software distributed under
                                                                      the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                      OF ANY KIND, either express or implied. See the License for the specific language
                                                                      governing permissions and limitations under the License.
                                                                      */ // Example: adobe_mc=TS%3D1641432103%7CMCMID%3D77094828402023918047117570965393734545%7CMCORGID%3DFAF554945B90342F0A495E2C%40AdobeOrg
// Decoded: adobe_mc=TS=1641432103|MCMID=77094828402023918047117570965393734545|MCORGID=FAF554945B90342F0A495E2C@AdobeOrg
var LINK_TTL_SECONDS = 300; // 5 minute link time to live
var _default = function _default(_ref) {
  var locationSearch = _ref.locationSearch,
    dateProvider = _ref.dateProvider,
    orgId = _ref.orgId,
    logger = _ref.logger;
  return function (payload) {
    if (payload.hasIdentity(_ecidNamespace.default)) {
      // don't overwrite a user provided ecid identity
      return;
    }
    var parsedQueryString = _utils.queryString.parse(locationSearch);
    var queryStringValue = parsedQueryString[_queryStringIdentityParam.default];
    if (queryStringValue === undefined) {
      return;
    }
    var properties = queryStringValue.split("|").reduce(function (memo, keyValue) {
      var _keyValue$split = keyValue.split("="),
        _keyValue$split2 = _slicedToArray(_keyValue$split, 2),
        key = _keyValue$split2[0],
        value = _keyValue$split2[1];
      memo[key] = value;
      return memo;
    }, {});
    // We are using MCMID and MCORGID to be compatible with Visitor.
    var ts = parseInt(properties.TS, 10);
    var mcmid = properties.MCMID;
    var mcorgid = decodeURIComponent(properties.MCORGID);
    if (
    // When TS is not specified or not a number, the following inequality returns false.
    // All inequalities with NaN variables are false.
    dateProvider().getTime() / 1000 <= ts + LINK_TTL_SECONDS && mcorgid === orgId && mcmid) {
      logger.info("Found valid ECID identity " + mcmid + " from the adobe_mc query string parameter.");
      payload.addIdentity(_ecidNamespace.default, {
        id: mcmid
      });
    } else {
      logger.info("Detected invalid or expired adobe_mc query string parameter.");
    }
  };
};
exports.default = _default;