"use strict";

exports.default = void 0;
var _handle = require("../../constants/handle");
var _flattenObject = require("../../utils/flattenObject");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                  Copyright 2023 Adobe. All rights reserved.
                                                                                                                                                                                                                  This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                  you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                  of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                  OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                  governing permissions and limitations under the License.
                                                                                                                                                                                                                  */
var _default = function _default(_ref) {
  var renderDecisions = _ref.renderDecisions,
    decisionProvider = _ref.decisionProvider,
    applyResponse = _ref.applyResponse,
    event = _ref.event,
    personalization = _ref.personalization,
    decisionContext = _ref.decisionContext;
  var context = _objectSpread(_objectSpread({}, (0, _flattenObject.default)(event.getContent())), decisionContext);
  return function (_ref2) {
    var response = _ref2.response;
    decisionProvider.addPayloads(response.getPayloadsByType(_handle.PERSONALIZATION_DECISIONS_HANDLE));

    // only evaluate events that include a personalization query
    if (!event.hasQuery()) {
      return {
        propositions: []
      };
    }
    var propositions = decisionProvider.evaluate(context);
    return applyResponse({
      renderDecisions: renderDecisions,
      propositions: propositions,
      event: event,
      personalization: personalization
    });
  };
};
exports.default = _default;