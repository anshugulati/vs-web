"use strict";

exports.default = exports.createEventPruner = void 0;
var _utils = require("./utils");
var _eventType = require("../../constants/eventType");
var _decisionProvider = require("../../constants/decisionProvider");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                  Copyright 2023 Adobe. All rights reserved.
                                                                                                                                                                                                                  This file is licensed to you under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                  you may not use this file except in compliance with the License. You may obtain a copy
                                                                                                                                                                                                                  of the License at http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                  
                                                                                                                                                                                                                  Unless required by applicable law or agreed to in writing, software distributed under
                                                                                                                                                                                                                  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
                                                                                                                                                                                                                  OF ANY KIND, either express or implied. See the License for the specific language
                                                                                                                                                                                                                  governing permissions and limitations under the License.
                                                                                                                                                                                                                  */
var STORAGE_KEY = "events";
var MAX_EVENT_RECORDS = 1000;
var RETENTION_PERIOD = 30;
var prefixed = function prefixed(key) {
  return "iam." + key;
};
var createEventPruner = function createEventPruner() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MAX_EVENT_RECORDS;
  var retentionPeriod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RETENTION_PERIOD;
  return function (events) {
    var pruned = {};
    Object.keys(events).forEach(function (eventType) {
      pruned[eventType] = {};
      Object.values(events[eventType]).filter(function (entry) {
        return new Date(entry.firstTimestamp) >= (0, _utils.getExpirationDate)(retentionPeriod);
      }).sort(function (a, b) {
        return a.firstTimestamp - b.firstTimestamp;
      }).slice(-1 * limit).forEach(function (entry) {
        pruned[eventType][entry.event[prefixed("id")]] = entry;
      });
    });
    return pruned;
  };
};
exports.createEventPruner = createEventPruner;
var _default = function _default(_ref) {
  var storage = _ref.storage;
  var currentStorage = storage;
  var restore;
  var save;
  var events;
  var setStorage = function setStorage(newStorage) {
    currentStorage = newStorage;
    restore = (0, _utils.createRestoreStorage)(currentStorage, STORAGE_KEY);
    save = (0, _utils.createSaveStorage)(currentStorage, STORAGE_KEY, createEventPruner(MAX_EVENT_RECORDS, RETENTION_PERIOD));
    events = restore({});
  };
  setStorage(storage);
  var addEvent = function addEvent(event, eventType, eventId, action) {
    var _objectSpread2;
    if (!eventType || !eventId) {
      return undefined;
    }
    if (!events[eventType]) {
      events[eventType] = {};
    }
    var existingEvent = events[eventType][eventId];
    var count = existingEvent ? existingEvent.count : 0;
    var timestamp = new Date().getTime();
    var firstTimestamp = existingEvent ? existingEvent.firstTimestamp || existingEvent.timestamp : timestamp;
    events[eventType][eventId] = {
      event: _objectSpread(_objectSpread({}, event), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, prefixed("id"), eventId), _defineProperty(_objectSpread2, prefixed("eventType"), eventType), _defineProperty(_objectSpread2, prefixed("action"), action), _objectSpread2)),
      firstTimestamp: firstTimestamp,
      timestamp: timestamp,
      count: count + 1
    };
    save(events);
    return events[eventType][eventId];
  };
  var addExperienceEdgeEvent = function addExperienceEdgeEvent(event) {
    var _event$getContent = event.getContent(),
      _event$getContent$xdm = _event$getContent.xdm,
      xdm = _event$getContent$xdm === void 0 ? {} : _event$getContent$xdm;
    var _experience = xdm._experience;
    if (!(0, _utils.hasExperienceData)(xdm)) {
      return;
    }
    var _experience$decisioni = _experience.decisioning,
      decisioning = _experience$decisioni === void 0 ? {} : _experience$decisioni;
    var _decisioning$proposit = decisioning.propositionEventType,
      propositionEventTypeObj = _decisioning$proposit === void 0 ? {} : _decisioning$proposit,
      _decisioning$proposit2 = decisioning.propositionAction,
      propositionAction = _decisioning$proposit2 === void 0 ? {} : _decisioning$proposit2,
      _decisioning$proposit3 = decisioning.propositions,
      propositions = _decisioning$proposit3 === void 0 ? [] : _decisioning$proposit3;
    var propositionEventTypesList = Object.keys(propositionEventTypeObj);

    // https://wiki.corp.adobe.com/pages/viewpage.action?spaceKey=CJM&title=Proposition+Event+Types
    if (propositionEventTypesList.length === 0) {
      return;
    }
    var validPropositionEventType = function validPropositionEventType(propositionEventType) {
      return propositionEventTypeObj[propositionEventType] === _eventType.EVENT_TYPE_TRUE;
    };
    var action = propositionAction.id;
    propositionEventTypesList.filter(validPropositionEventType).forEach(function (propositionEventType) {
      propositions.forEach(function (proposition) {
        if ((0, _utils.getDecisionProvider)(proposition) !== _decisionProvider.ADOBE_JOURNEY_OPTIMIZER) {
          return;
        }
        addEvent({}, propositionEventType, (0, _utils.getActivityId)(proposition), action);
      });
    });
  };
  var getEvent = function getEvent(eventType, eventId) {
    if (!events[eventType]) {
      return undefined;
    }
    return events[eventType][eventId];
  };
  return {
    addExperienceEdgeEvent: addExperienceEdgeEvent,
    addEvent: addEvent,
    getEvent: getEvent,
    toJSON: function toJSON() {
      return events;
    },
    setStorage: setStorage
  };
};
exports.default = _default;